import inspect
import traceback
from collections import defaultdict


ALL_DEBUG_CONTEXT = defaultdict(list)


data DebugContext(
    frame_info,
    source_lines: str[],
    extra_info: dict[str, str],
):
    def __init__(self):
        ALL_DEBUG_CONTEXT[self.filename].append(self)
    @property
    def filename(self) = self.frame_info.filename
    @property
    def lineno(self) = self.frame_info.lineno
    @property
    def function(self) = self.frame_info.function
    @property
    def context(self) = self.frame_info.code_context, self.frame_info.index
    @property
    def raw_source(self) = "\n".join(self.source_lines)


def collect_stack_info(stack_level=1):
    cur_frame = inspect.currentframe()
    outer_frame = reduce(
        (frame, _) => frame.f_back,
        range(stack_level),
        cur_frame,
    )

    frame_info = inspect.getframeinfo(outer_frame)
    source_lines, ==frame_info.lineno = inspect.getsourcelines(outer_frame)

    return DebugContext(
        frame_info=,
        source_lines=,
        extra_info={
            "locals": repr(frame.f_locals),
            "globals": repr(frame.f_globals),
        }
    )


def collect_exc_info(exc_type, exc_val, exc_tb):
    source_lines, ==exc_tb.lineno = inspect.getsourcelines(exc_tb)
    pretty_tb = traceback.format_exception(exc_type, exc_val, exc_tb) |> "\n.join"

    return DebugContext(
        frame_info=exc_tb,
        source_lines=,
        extra_info={
            "traceback": pretty_tb,
        }
    )
