import inspect
import traceback
import builtins
from collections import defaultdict


ALL_DEBUG_CONTEXT = defaultdict(list)


reset = ALL_DEBUG_CONTEXT.clear


data DebugContext(
    name: str,
    frame_info,
    source_lines: str[],
    extra_info: dict[str, str],
):
    """Collection of information gathered about a debug event."""
    def __init__(self, *args, **kwargs):
        ALL_DEBUG_CONTEXT[self.filename].append(self)
    @property
    def filename(self) = self.frame_info.filename
    @property
    def lineno(self) = self.frame_info.lineno
    @property
    def function(self) = self.frame_info.function
    @property
    def context_lines(self) = self.frame_info.code_context
    @property
    def context_index(self) = self.frame_info.index
    @property
    def raw_context(self) = "".join(self.context_lines)
    @property
    def raw_source(self) = "".join(self.source_lines)


IGNORED_VARS = set(dir(builtins)) | {"claude_here"}


def format_vars(vardict) = {
    name: val for name, val in vardict.items()
    if not name.startswith("__") and name not in IGNORED_VARS
} |> repr


def collect_stack_info(stack_level=1):
    """Collect information about the callee site for sending to Claude."""
    cur_frame = inspect.currentframe()
    outer_frame = reduce(
        (frame, _) => frame.f_back,
        range(stack_level),
        cur_frame,
    )

    frame_info = inspect.getframeinfo(outer_frame)
    try:
        source_lines, source_lineno = inspect.getsourcelines(outer_frame)
    except OSError:
        source_lines = []

    return DebugContext(
        name="breakpoint",
        frame_info=,
        source_lines=,
        extra_info={
            "locals": format_vars(outer_frame.f_locals),
            "globals": format_vars(outer_frame.f_globals),
        }
    )


def filter_traceback(orig_tb):
    """Filter out traceback frames from claude_here."""
    new_tb_top = orig_tb
    while new_tb_top is not None and new_tb_top.tb_frame.f_globals.get("__package__") == "claude_here":
        new_tb_top = new_tb_top.tb_next

    if new_tb_top is not None:
        tb_cursor_plus_1 = new_tb_top
        tb_cursor = tb_cursor_plus_1.tb_next
        while tb_cursor is not None:
            tb_cursor_minus_1 = tb_cursor.tb_next
            if tb_cursor.tb_frame.f_globals.get("__package__") == "claude_here":
                tb_cursor_plus_1.tb_next = tb_cursor_minus_1
                tb_cursor_plus_1, tb_cursor = (
                    tb_cursor_plus_1,
                    tb_cursor_minus_1,
                )
            else:
                tb_cursor_plus_1, tb_cursor = (
                    tb_cursor,
                    tb_cursor_minus_1,
                )

    return new_tb_top


def collect_exc_info(exc_type, exc_val, exc_tb):
    """Collect information about the given exception for sending to Claude."""
    filtered_tb = filter_traceback(exc_tb)

    frame_info = inspect.getframeinfo(filtered_tb.tb_frame)
    source_lines, source_lineno = inspect.getsourcelines(filtered_tb)
    pretty_tb = (
        traceback.format_exception(exc_type, exc_val, filtered_tb)
        |> "".join
        |> .rstrip()
    )

    return DebugContext(
        name="exception",
        frame_info=frame_info,
        source_lines=,
        extra_info={
            "traceback": pretty_tb,
        }
    )
