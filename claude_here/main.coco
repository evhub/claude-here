import sys

from claude_here.debugger import collect_stack_info, collect_exc_info
from claude_here.launcher import launch_claude


BASE_HOOKS = {
    "breakpointhook": sys.__breakpointhook__,
    "excepthook": sys.__excepthook__,
}


def breakpointhook(msg=None, just_gather_info=False, base_debugger=None, **kwargs):
    """Claude breakpoint handler."""
    extra_info = {}
    if msg is not None:
        extra_info["user_message"] = msg
    collect_stack_info(stack_level=2, extra_info=extra_info)
    if not just_gather_info:
        launch_claude(**kwargs)
        (base_debugger ?? BASE_HOOKS["breakpointhook"])()


EXTRA_RECURSION_LIMIT = 100
IGNORE_EXCEPTIONS_FROM = {"pdb", "bdb"}


def excepthook(exc_type, exc_val, exc_tb):
    """Claude exception handler."""
    # if we're recovering from a RecursionError, we'll need some extra stack
    sys.setrecursionlimit(sys.getrecursionlimit() + EXTRA_RECURSION_LIMIT)
    try:
        BASE_HOOKS["excepthook"](exc_type, exc_val, exc_tb)
    finally:
        if getattr(exc_type, "__module__", "") not in IGNORE_EXCEPTIONS_FROM:
            collect_exc_info(exc_type, exc_val, exc_tb)
            launch_claude()


def set_claude_here_breakpoint(on=True):
    """Set breakpoint() to collect info and launch Claude."""
    if on:
        if sys.breakpointhook is not breakpointhook:
            BASE_HOOKS["breakpointhook"], sys.breakpointhook = sys.breakpointhook, breakpointhook
    else:
        sys.breakpointhook = BASE_HOOKS["breakpointhook"]


def set_claude_here_excepthook(on=True):
    """Configure uncaught exceptions to launch Claude."""
    if on:
        if sys.excepthook is not excepthook:
            BASE_HOOKS["excepthook"], sys.excepthook = sys.excepthook, excepthook
    else:
        sys.excepthook = BASE_HOOKS["excepthook"]
