import sys

from claude_here.debugger import collect_stack_info, collect_exc_info
from claude_here.launcher import launch_claude


def breakpointhook(just_gather_info=False, base_debugger=sys.__breakpointhook__, **kwargs):
    """Claude breakpoint handler."""
    collect_stack_info(stack_level=2)
    if not just_gather_info:
        launch_claude(**kwargs)
        if base_debugger is None:
            input("Press Enter when you're done talking with Claude to continue to the next breakpoint.")
        elif base_debugger:
            base_debugger()


EXTRA_RECURSION_LIMIT = 100
IGNORE_EXCEPTIONS_FROM = {"pdb", "bdb"}


def excepthook(exc_type, exc_val, exc_tb):
    """Claude exception handler."""
    # if we're recovering from a RecursionError, we'll need some extra stack
    sys.setrecursionlimit(sys.getrecursionlimit() + EXTRA_RECURSION_LIMIT)
    if getattr(exc_type, "__module__", "") not in IGNORE_EXCEPTIONS_FROM:
        collect_exc_info(exc_type, exc_val, exc_tb)
        launch_claude()
    sys.__excepthook__(exc_type, exc_val, exc_tb)


def set_claude_here_breakpoint(on=True):
    """Set breakpoint() to collect info and launch Claude."""
    if on:
        sys.breakpointhook = breakpointhook
    else:
        sys.breakpointhook = sys.__breakpointhook__


def set_claude_here_excepthook(on=True):
    """Configure uncaught exceptions to launch Claude."""
    if on:
        sys.excepthook = excepthook
    else:
        sys.excepthook = sys.__excepthook__
